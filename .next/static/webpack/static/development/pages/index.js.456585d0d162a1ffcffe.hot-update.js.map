{"version":3,"file":"static/webpack/static/development/pages/index.js.456585d0d162a1ffcffe.hot-update.js","sources":["webpack:///./components/QuoteForm/QuoteForm.js"],"sourcesContent":["import React from 'react'; \nimport './QuoteForm.css';\nimport axios from 'axios';\nimport Script from 'react-load-script';\nimport Geocode from \"react-geocode\";\nimport styled from 'styled-components';\nimport {SingleDatePicker} from 'react-dates';\nimport Router from 'next/router'\nimport 'react-day-picker/lib/style.css';\nimport moment from 'moment';\nimport MomentLocaleUtils, {\n    formatDate,\n    parseDate,\n  } from 'react-day-picker/moment';\n  \n\nGeocode.setApiKey(\"AIzaSyBvDA0hOnuN-KijkcT9IFYapOH9042QSso\");\n\nconst Wrapper = styled.div`\n  .SingleDatePickerInput {\n    background-color: #EFEFEF\n\n  }\n  .DateInput_input{\n    font-size: 13px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    background-color: #EFEFEF\n  }\n  .DateInput_input_1{\n    font-size: 13px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    background-color: #EFEFEF;\n    \n  }\n\n    \n  \n`;\n\n\nclass QuoteForm extends React.Component{\n    constructor(){\n        super();\n        this.eventAddress = React.createRef();\n\n        this.state = {\n            isSuburbQuote: false,\n            page1fields: ['autofill','state','postcode','suburb','eventDate','time','event_desc'],\n            page2fields: ['numOfPeople'],\n            page3fields: ['firstName','email','mobile'],\n            width: 0,\n            height: 0,\n            autofill: '',\n            serviceMap: new Map(),\n            isLoaded: false,\n            page: 1,\n            state: '',\n            suburb: '',\n            firstName: '',\n            email: '',\n            mobile: '',\n            eventDate: '',\n            time: '',\n            postcode: '',\n            formattedTime: '',\n            event_desc: '',\n            lookDesc: '',\n            numOfPeople: 0,\n            person1serviceField: '',\n            person2serviceField: '',\n            person3serviceField: '',\n            person4serviceField: '',\n            person5serviceField: '',\n            person6serviceField: '',\n            person7serviceField: '',\n            person8serviceField: '',\n            person1: '',\n            person1service: '',  \n            person2: '',\n            person2service: '',\n            person3: '',\n            person3service: '',\n            person4: '',\n            person4service: '',\n            person5: '',\n            person5service: '',\n            person6: '',\n            person6service: '',\n            person7: '',\n            person7service: '',      \n            person8: '',\n            person8service: '',\n            hasErrors: false, \n            errors: {\n                autofill: false,\n                autofillMsg: 'please enter the event location',\n                state: false,\n                stateMsg: 'select your state',\n                firstName: false,\n                firstNameMsg: 'enter a valid first name',\n                email: false,\n                emailMsg: 'enter a valid email',\n                mobile: false,\n                mobileMsg: 'enter a valid mobile (04xxxxxxxx)',\n                name: false, \n                nameMsg: 'enter a valid first name',\n                postcode: false,\n                postcodeMsg: 'enter a valid postcode',\n                suburb: false, \n                suburbMsg: 'enter the suburb',\n                eventDate: false,\n                eventDateMsg: 'select event date',\n                time: false,\n                timeMsg: 'select time',\n                event_desc: false, \n                event_descMsg: 'enter an event description',\n                numOfPeople: 0,\n                numOfPeopleMsg: 'select number of people',\n                person1: false,\n                personMsg: 'select person',\n                person1service: false,  \n                personServiceMsg: 'choose the service',\n                person2: false,\n                person2service: false,\n                person3: false,\n                person3service: false,\n                person4: false,\n                person4service: false,\n                person5: false,\n                person5service: false,\n                person6: false,\n                person6service: false,\n                person7: false,\n                person7service: false,      \n                person8: false,\n                person8service: false,    \n            }\n            \n        }\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n\n    \n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n        if(this.props.isSuburbQuote){\n            this.setState({\n                isSuburbQuote: true\n            })\n        }\n\n      }\n      \n      componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n      }\n      \n      updateWindowDimensions() {\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\n      }\n\n    \n    handleEnterSubmit = (e)=> {\n        if(e.key === 'Enter'){\n            this.submitClickHandler(e);\n       }\n\n    }\n\n    inputIsValid = (e) => {\n       return true;\n    }\n\n    \n    onFieldChange = (e) => {\n\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n        this.validateInput(e);\n    }\n\n    onSelectChange = (e) => {\n        e.target.querySelector('#placeholder-select').disabled = true;\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n    }\n\n    onServiceChange = (e) => {\n        e.target.querySelector('#placeholder-select').disabled = true;\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n\n    }\n\n    onTextAreaChange = (e) => {\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n    }\n\n    onPersonChange = (e,serviceMap) => {\n        e.target.querySelector('#placeholder-select').disabled = true;\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n\n        let serviceOptions = serviceMap.get(e.target.value);\n\n       // let selector = e.target.parentNode.parentNode.querySelector(\"#\"+e.target.id+\"service\");        \n\n        let serviceInput =`<option id=\"placeholder-select\" >--select--</option>`;\n        for(let service of serviceOptions){\n            let val = service.value;\n            let display = service.display;\n            serviceInput += `<option value=${val}>${display}</option>`\n        }\n\n        this.setState({\n            [e.target.name] : e.target.value,\n            [`${e.target.name}serviceField`]: serviceInput\n        })\n\n    }\n\n    handleScriptLoad = () =>{ \n        // Declare Options For Autocomplete \n        var options = {componentRestrictions: {country: \"au\"} }; \n        \n        // Initialize Google Autocomplete \n        /*global google*/\n        this.autocomplete = new google.maps.places.Autocomplete(\n                              document.getElementById('quoteAutofill'),\n                              options ); \n        // Fire Event when a suggested name is selected\n        this.autocomplete.addListener('place_changed',\n                                      this.handlePlaceSelect); \n      }\n\n    handlePlaceSelect = () => {\n\n    // Extract City From Address Object\n\n      let addressObject = this.autocomplete.getPlace();\n      \n      const address = addressObject.address_components;\n      let postCode = ''; \n      let state = '';\n      let suburb = '';\n      \n      for(let x of address){\n          if(x.types.includes(\"locality\")){\n              suburb =  x.short_name\n          }\n          if(x.types.includes(\"administrative_area_level_1\")){\n              state = x.short_name\n          }\n          if(x.types.includes(\"postal_code\")){\n              postCode =  x.short_name\n          }\n      }\n      this.setState({\n          autofill: addressObject.formatted_address,\n          suburb: suburb,\n          state: state,\n          postcode: postCode\n      }, () => {\n          this.fieldsAreValid(['state','suburb','postcode']);\n      })\n\n    \n    }\n\n\n\n    onDateChange = (date) =>{\n        let s = date;\n        let formattedDate = date.format(\"YYYY-MM-DD\");\n       \n        this.setState({\n            eventDate: formattedDate,\n            date:date\n        })\n\n    }\n\n    \n    onTimeChange = (e) => {\n        let time = e.target.value+\"\"\n        this.setState({\n            time: e.target.value,\n            formattedTime: time\n        })\n    }\n\n\n    onNumPeopleChange = (e) => {\n\n        let num = e.target.value;\n\n        let page2fields = ['numOfPeople'];\n        for(let i = 1; i <= num; i++){\n            page2fields.push(`person${i}`);\n            page2fields.push(`person${i}service`);\n        }\n        this.setState({\n            page2fields: page2fields,\n            numOfPeople: num\n        },()=>{\n            this.clearPage2Errors();\n\n        })\n\n    }\n    clearPage2Errors = () => {\n        Object.keys(this.state.errors).map((key, index) => {\n            if(!this.state.page2fields.includes(key.toString()) && !key.toString().includes('Msg')){\n                this.state.errors[key] = false;\n            }\n           \n         });\n    }\n\n    nextClickHandler = (e) => {\n        this.clearAllErrors();\n        e.preventDefault();\n        window.scrollTo(0, 0);\n        let fields;\n        if(this.state.page === 1){\n            fields = this.state.page1fields;\n        }else if(this.state.page === 2){\n            fields = this.state.page2fields;\n\n        }\n        \n        if(!this.fieldsAreValid(fields)){\n            let currPage = this.state.page + 1;\n            if(currPage < 4){\n                this.setState({\n                    page: currPage\n                })\n            }\n        }\n       \n        \n    }\n\n    handleKeyPress = (e) => {\n       if(e.key === 'Enter'){\n            this.nextClickHandler(e);\n       }\n    }\n    \n    clearAllErrors = () => {\n        Object.keys(this.state.errors).map((key, index) => {\n                if(!key.toString().includes('Msg')){\n                    this.state.errors[key] = false;\n                }\n            });\n    }\n\n\n    prevClickHandler = (e) => {\n    \n            e.preventDefault();\n            let currPage = this.state.page - 1;\n            if(currPage > 0){\n                this.setState({\n                    page: currPage\n                })\n            }\n        \n    }\n\n    submitClickHandler = (e) => {\n        e.preventDefault();\n        let fields = this.state.page3fields;\n        if(!this.fieldsAreValid(fields)){\n\n            this.props.hideForm();\n        let array = [];\n        for(let i = 0; i < this.state.numOfPeople; i++){\n            \n            array.push([\n                this.state[\"person\"+(i+1)], this.state[\"person\"+(i+1)+\"service\"]\n            ])\n\n        }\n\n        let quoteInfo = {\n            name: this.state.firstName,\n            email: this.state.email,\n            mobile: this.state.mobile,\n            state: this.state.state,\n            suburb: this.state.suburb,\n            postcode: this.state.postcode,\n            event_date: this.state.eventDate,\n            event_time: this.state.time,\n            event_desc: this.state.event_desc,\n            num_of_people: parseInt(this.state.numOfPeople),\n            person_service_list: array,\n            look_desc: this.state.lookDesc\n        }\n        \n        axios.post(`https://express-server-ap-southeast-2.flayr.io/quotes`, quoteInfo)\n          .then(res => {\n\n\n          this.setState({\n              isLoaded: true\n          })\n          this.props.loadedQuote();\n          Router.push(`${this.props.submitRoute}`+res.data.body.shopify_id);\n        })\n        .catch(err => {\n            console.log(err)\n        })\n\n        }\n        \n    }\n\n    //pass in the state key and stringToTest\n    passedRegex = (fieldKey,stringToTest) => {\n        let passed = false;\n        let regexMap = new Map(); \n        //key, regex\n        regexMap.set('autofill', /(?!^ +$)^.+$/);\n        regexMap.set('postcode', /^\\d{4}$/);\n        regexMap.set('state', /NSW|VIC|QLD|TAS|ACT|NT|WA|SA/);\n        regexMap.set('suburb', /^[a-zA-Z ]+$/);\n        regexMap.set('eventDate', /^\\d{4}-\\d{2}-\\d{2}$/);\n        regexMap.set('time', /^([01][0-9]|2[0-3]):([0-5][0-9])$/);\n        regexMap.set('event_desc', /(?!^ +$)^.+$/);\n        regexMap.set('numOfPeople',/^[1-9]$/);\n\n        for(let i = 1; i <= this.state.numOfPeople; i++){\n            regexMap.set(`person${i}`,/(?!^ +$)^.+$/);\n            regexMap.set(`person${i}service`,/(?!^ +$)^.+$/);\n\n        }\n\n        regexMap.set('firstName',/^[a-zA-Z ]+$/);\n        regexMap.set('email', \t\n        /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        regexMap.set('mobile', /^04[0-9]{8}/);\n\n\n\n        let regexToTest;\n        if(regexMap.get(fieldKey)){\n           regexToTest = regexMap.get(fieldKey);\n        }else{\n            passed = false\n        }\n        \n        if(regexToTest){\n            passed = regexToTest.test(stringToTest);\n        }\n\n        \n\n        return passed;\n\n    }\n\n    validateDate = ({focused}) => {\n        this.setState({\n            focused\n        })\n\n\n        let errorsObj = this.state.errors;\n        let val = this.state.eventDate;\n\n        if(!focused){\n            if(!this.passedRegex(\"eventDate\",val)){\n                errorsObj[\"evetDate\"] = true;\n                this.setState({errors: errorsObj})\n            }else{\n                errorsObj[\"eventDate\"] = false;\n                this.setState({errors: errorsObj})\n            }\n        }\n    }\n    validateInput = (e) => {\n        let errorsObj = this.state.errors;\n        let val = this.state[e.target.name]; \n\n        if(e.target.name !== undefined){\n            if(!this.passedRegex(e.target.name,val)){\n                errorsObj[e.target.name] = true;\n                this.setState({errors: errorsObj});\n            \n           \n          \n        }else{\n                errorsObj[e.target.name] = false;\n                this.setState({errors: errorsObj});\n        }\n        }\n        \n        \n    }\n\n\n\n\n   \n    //pass in fields\n    fieldsAreValid = (fields) => {\n        let errorsObj = this.state.errors\n\n        \n        for(let f of fields){\n            if(!this.passedRegex(f,this.state[f])){\n                errorsObj[f] = true;\n                this.setState({errors: errorsObj})\n            }else{\n                errorsObj[f] = false; \n                this.setState({errors: errorsObj})\n                this.setState({errors: errorsObj})\n            }\n        }\n\n        let hasErrors = false;\n        Object.keys(this.state.errors).map((key, index) => {\n            if(this.state.errors[key] === true && key){\n                hasErrors = true;\n            }\n           \n         });\n         return hasErrors\n\n    }\n\n    \n\n    render() {\n\n        \n\n        let datePlaceholder= this.state.errors.eventDate ? this.state.errors.eventDateMsg : \"event date\"\n\n        if(this.state.eventDate){\n            datePlaceholder = formatDate(this.state.eventDate, 'LL', 'en') \n        }\n       \n\n        const today = moment().format('YYYY-MM-DD')\n        this.state.serviceMap.set(\"nonbridal\", [{value: \"_makeup_and_hair_up\",display: \"makeup & hair up\"},{value: \"_makeup_and_hair_down\",display: \"makeup & hair down\"} ,{value: \"_makeup_only\",display: \"makeup only\"}, {value: \"_hair_down\",display: \"hair down\"} ,{value: \"_hair_up\",display: \"hair up\"}]);\n    this.state.serviceMap.set(\"bride\", [{value: \"_makeup_and_hair\",display: \"makeup & hair\"},{value: \"_makeup_only\" ,display: \"makeup only\"},{value: \"_hair_only\" ,display: \"hair only\"}]);\n    this.state.serviceMap.set(\"bridesmaid\", [{value: \"_makeup_and_hair\",display: \"makeup & hair\"},{value: \"_makeup_only\" ,display: \"makeup only\"},{value: \"_hair_only\" ,display: \"hair only\"}]);\n    this.state.serviceMap.set(\"mother\", [{value: \"_makeup_and_hair\",display: \"makeup & hair\"},{value: \"_makeup_only\" ,display: \"makeup only\"},{value: \"_hair_only\" ,display: \"hair only\"}]);\n    this.state.serviceMap.set(\"flowergirl\", [{value: \"_makeup_and_hair\", display: \"makeup & hair\"}]);\n\n        let formOptions = [];\n\n        for(let i = 1; i <= this.state.numOfPeople; i++){\n            let for_ = \"quotePerson\"+i;\n            let name = \"person\"+i;\n            let id = \"quotePerson\"+i;\n            let serviceId = \"service\"+id;\n\n\n\n            \n            \n            let infoBoxvisible = \"info-box Form__Item\"; \n            let infoBoxhidden = \"info-box info-box-hidden Form__Item\";\n            let subOptionvisible = \"sub-option Form__Item info-box-hidden\"\n            let subOptionhidden = \"sub-option Form__Item\"\n            formOptions.push(\n                \n                <div>\n\n                <div className=\"Form__Item\" >\n                        <select className={!this.state.errors[`${name}`] ? \"Form__Input\" : \"Form__Input form-field-error\"}  \n                        onChange={(e) => this.onPersonChange(e,this.state.serviceMap)}\n                        onBlur={(e) => this.validateInput(e)}\n                        \n                            value={this.state[\"person\"+i]} \n                            type=\"select\" \n                            name={name} \n                            id={id}\n                            \n                            >\n                            <option id=\"placeholder-select\" >--select--</option>\n                            <option>nonbridal</option>\n                            <option>bride</option>\n                            <option>bridesmaid</option>\n                            <option>mother</option>\n                            <option>flowergirl</option>\n                        </select>\n                       \n                        <div id=\"infoBox\" className={this.state[`person${i}`] === 'nonbridal' ? infoBoxvisible : infoBoxhidden}>\n                            <p>\n                                <strong>Hair down style</strong> is hair straightening, blow wave, or curls with no pinning required.\n                                <br />\n                                <strong>Hair up style </strong> is any other hairstyle.\n                            </p>\n                        </div>\n                        <span className=\"error-span\">{this.state.errors[`${name}`] ? this.state.errors.personMsg: \"\"}</span>\n                        <label className=\"Form__FloatingLabel\" for={for_}>person {i}</label>\n                    </div>\n             \n\n                <div className={this.state[`person${i}`] ? subOptionhidden: subOptionvisible } >\n                   \n                   <select dangerouslySetInnerHTML={{__html: this.state[`person${i}serviceField`]}} \n                   className={!this.state.errors[`${name}service`] ? \"Form__Input\" : \"Form__Input form-field-error\"} \n                   onChange={(e) => this.onServiceChange(e)} \n                   onBlur={(e) => this.validateInput(e)}\n                       value={this.state[\"person\"+i+\"service\"]} \n                       type=\"select\" \n                       name={name+\"service\"}\n                       ref={name+\"service\"}\n                       id={id+\"service\"}\n                       >\n\n                   </select> \n                   <span className=\"error-span\">{this.state.errors[`${name}service`] ? this.state.errors.personServiceMsg: \"\"}</span>\n\n                   \n                   <label className=\"Form__FloatingLabel\" for={id+\"service\"}>person {i} service</label>   \n               </div>\n\n                </div>\n\n\n\n            )\n        }\n\n        let pageMap = new Map();\n\n\n        let dateClassString = \"Form__Input date-input\";\n        if(this.state.errors.eventDate){\n            dateClassString = \"Form__Input form-field-error date-input\";\n        }\n        let page1 = (\n            <div>\n                <Script url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBvDA0hOnuN-KijkcT9IFYapOH9042QSso&libraries=places\"          \n                onLoad={this.handleScriptLoad}\n                />   \n                <div className=\"Form__Group\">\n                <div className=\"Form__Item\" >\n                        <input className={!this.state.errors.autofill ? \"Form__Input\" : \"Form__Input form-field-error\"} aria-label=\"EventAddress\" onChange={(e) => this.onFieldChange(e)} \n                               value={this.state.autofill}\n                               type=\"text\" \n                               name=\"autofill\" \n                               id=\"quoteAutofill\"\n                               placeholder=\"where should the stylist come to\" required=\"true\"\n                               ref={this.eventAddress}\n                               onBlur={(e) => this.validateInput(e)}\n                               required/>\n                        <span className=\"error-span\">{this.state.errors.autofill ? this.state.errors.autofillMsg: \"\"}</span>\n                        <label className=\"Form__FloatingLabel\" for=\"quoteAutofill\">where should the stylist come to</label>\n                    </div>  \n                </div>\n                <div className=\"Form__Group\">\n                    <div className=\"Form__Item\" >\n                        <select className={!this.state.errors.state ? \"Form__Input\" : \"Form__Input form-field-error\"} \n                               onChange={(e) => this.onSelectChange(e)} \n                               value={this.state.state} \n                               type=\"select\" \n                               name=\"state\" \n                               id=\"quoteState\"\n                               onBlur={(e) => this.validateInput(e)}\n                               >\n                            <option id=\"placeholder-select\" >--select--</option>\n                            <option>NSW</option>\n                            <option>QLD</option>\n                            <option>VIC</option>\n                            <option>TAS</option>\n                            <option>WA</option>\n                            <option>NT</option>\n                            <option>SA</option>\n                            <option>ACT</option>\n\n\n                        </select>\n                        <span className=\"error-span\">{this.state.errors.state ? this.state.errors.stateMsg: \"\"}</span>\n                        <label className=\"Form__FloatingLabel\" for=\"quoteState\">state</label>\n\n                    </div>\n                         \n                <div className=\"Form__Item\" >\n                        <input className={!this.state.errors.postcode ? \"Form__Input\" : \"Form__Input form-field-error\"} aria-label=\"Postcode\" \n                               onChange={(e) => this.onFieldChange(e)} \n                               onBlur={(e) => this.validateInput(e)}\n                               value={this.state.postcode}\n                               type=\"text\" \n                               name=\"postcode\" \n                               id=\"quoteSuburb\"\n                               placeholder=\"postcode\"\n                               required\n                        />\n                        <span className=\"error-span\">{this.state.errors.postcode ? this.state.errors.postcodeMsg: \"\"}</span>\n\n                        <label className=\"Form__FloatingLabel\" for=\"quoteState\">postcode</label>\n                    </div>\n\n                    \n                   \n                </div>\n            <div className=\"Form__Group\">\n                <div className=\"Form__Item\" >\n                        <input className={!this.state.errors.suburb ? \"Form__Input\" : \"Form__Input form-field-error\"} aria-label=\"Suburb\" onChange={(e) => this.onFieldChange(e)} \n                               value={this.state.suburb}\n                               type=\"text\" \n                               name=\"suburb\" \n                               id=\"quoteSuburb\"\n                               placeholder=\"suburb\"\n                               onBlur={(e) => this.validateInput(e)}\n                               required/>\n                            <span className=\"error-span\">{this.state.errors.suburb ? this.state.errors.suburbMsg: \"\"}</span>\n\n                        <label className=\"Form__FloatingLabel\" for=\"quoteState\">suburb</label>\n                    </div>  \n            </div>\n               \n            \n    \n                    <div className=\"Form__Group\">\n\n\n                        <div className=\"Form__Item\" >\n                            \n                            <Wrapper className=\"form-field-error\">\n                                    <SingleDatePicker\n                                    hideKeyboardShortcutsPanel={true}\n                                    date={this.state.date} // momentPropTypes.momentObj or null\n                                    onDateChange={date => this.onDateChange(date)} // PropTypes.func.isRequired\n                                    focused={this.state.focused} // PropTypes.bool\n                                    onFocusChange={(focused) => this.validateDate(focused)} // PropTypes.func.isRequired\n                                    id=\"your_unique_id\" // PropTypes.string.isRequired,\n                                    numberOfMonths={1}\n                                    withPortal={this.state.width < 600 ? true: false}\n                                    displayFormat=\"ddd MMM D YYYY\"\n                                    showClearDate block\n                                    showClearDate={false}\n                                    placeholder=\"date\"\n                                    readOnly\n                                    />\n                            </Wrapper>\n                            <span className=\"error-span\">{this.state.errors.eventDate ? this.state.errors.eventDateMsg: \"\"}</span>\n\n                             \n\n                             </div>  \n                             <div className=\"Form__Item\">\n                    <select name=\"time\" \n                    id=\"quoteTime\" \n                    aria-label=\"start time\" \n                    className={!this.state.errors.time ? \"Form__Input\" : \"Form__Input form-field-error\"}\n                     value={this.state.time} \n                     type=\"select\" \n                     onBlur={(e) => this.validateInput(e)}\n                     onChange={(e) => this.onSelectChange(e)} required\n                    >\n                        <option id=\"placeholder-select\" >--select--</option>\n                        <option value=\"05:00\">5 AM</option>\n                        <option value=\"05:30\">5:30 AM</option>\n                        <option value=\"06:00\">6 AM</option>\n                        <option value=\"06:30\">6:30 AM</option>\n                        <option value=\"07:00\">7 AM</option>\n                        <option value=\"07:30\">7:30 AM</option>\n                        <option value=\"08:00\">8 AM</option>\n                        <option value=\"08:30\">8:30 AM</option>\n                        <option value=\"09:00\">9 AM</option>\n                        <option value=\"09:30\">9:30 AM</option>\n                        <option value=\"10:00\">10 AM</option>\n                        <option value=\"10:30\">10:30 AM</option>\n                        <option value=\"11:00\">11 AM</option>\n                        <option value=\"11:30\">11:30 AM</option>\n                        <option value=\"12:00\">Midday</option>\n                        <option value=\"12:30\">12:30 PM</option>\n                        <option value=\"13:00\">1 PM</option>\n                        <option value=\"13:30\">1:30 PM</option>\n                        <option value=\"14:00\">2 PM</option>\n                        <option value=\"14:30\">2:30 PM</option>\n                        <option value=\"15:00\">3 PM</option>\n                        <option value=\"15:30\">3:30 PM</option>\n                        <option value=\"16:00\">4 PM</option>\n                        <option value=\"16:30\">4:30 PM</option>\n                        <option value=\"17:00\">5 PM</option>\n                        <option value=\"17:30\">5:30 PM</option>\n                        <option value=\"18:00\">6 PM</option>\n                        <option value=\"18:30\">6:30 PM</option>\n                        <option value=\"19:00\">7 PM</option>\n                        <option value=\"19:30\">7:30 PM</option>\n                        <option value=\"20:00\">8 PM</option>\n                        <option value=\"20:30\">8:30 PM</option>\n                        <option value=\"21:00\">9 PM</option>\n                        <option value=\"21:30\">9:30 PM</option>\n                        <option value=\"22:00\">10 PM</option>\n                        <option value=\"22:30\">10:30 PM</option>\n                        <option value=\"23:00\">11 PM</option>\n                        <option value=\"23:30\">11:30 PM</option>\n                        <option value=\"00:00\">Midnight</option>\n                        <option value=\"01:00\">1 AM</option>\n                        <option value=\"01:30\">1:30 AM</option>\n                        <option value=\"02:00\">2 AM</option>\n                        <option value=\"02:30\">2:30 AM</option>\n                        <option value=\"03:00\">3 AM</option>\n                        <option value=\"03:30\">3:30 AM</option>\n                        <option value=\"04:00\">4 AM</option>\n                        <option value=\"04:30\">4:30 AM</option>\n                    </select>\n                    <span className=\"error-span\">{this.state.errors.time ? this.state.errors.timeMsg: \"\"}</span>\n\n                    <label className=\"Form__FloatingLabel\">time to be ready by</label>\n                </div>\n                    </div> \n                    <div className=\"Form__Item\" onKeyPress={(e) => this.handleKeyPress(e)}>\n                        <input  className={!this.state.errors.event_desc ? \"Form__Input\" : \"Form__Input form-field-error\"} aria-label=\"event Description\" \n                               onBlur={(e) => this.validateInput(e)}\n                               onChange={(e) => this.onFieldChange(e)} \n                               value={this.state.event_desc}\n                               type=\"text\" \n                               name=\"event_desc\" \n                               id=\"quoteDesc\"\n                               placeholder={this.state.errors.event_desc? this.state.errors.event_descMsg: \"what's the event\"} \n                               required/>\n                        <span className=\"error-span\">{this.state.errors.event_desc ? this.state.errors.event_descMsg: \"\"}</span>\n\n                        <label className=\"Form__FloatingLabel\" for=\"quoteDesc\">describe the event</label>\n                    </div>  \n                    <button className=\"button-form Button Button--primary\"  style={{zIndex: '0'}} onClick={this.nextClickHandler}>Next</button>\n            </div>\n        )\n        pageMap.set(1, page1);\n\n        let page2 = (\n            <div>\n           \n                <div className=\"Form__Item\" >\n\n                    <select className={!this.state.errors.numOfPeople ? \"Form__Input\" : \"Form__Input form-field-error\"} placeholder=\"Select State\" \n                    onChange={(e) => this.onNumPeopleChange(e)} \n                    onBlur={(e) => this.validateInput(e)}\n                        value={this.state.numOfPeople} \n                        type=\"select\" \n                        name=\"numOfPeople\" \n                        id=\"quoteNumOfPeople\"\n                        required\n                        >\n                        <option id=\"placeholder-select\" >--select--</option>\n                        <option>1</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option>5</option>\n                        <option>6</option>\n                        <option>7</option>\n                        <option>8</option>\n\n                    </select>    \n                    <span className=\"error-span\">{this.state.errors.numOfPeople ? this.state.errors.numOfPeopleMsg: \"\"}</span>\n                \n                    <label className=\"Form__FloatingLabel\" for=\"quoteNumOfPeople\">number of people</label>\n                           \n                    </div>\n                    {formOptions.map((option) =>\n                        <div>{option}</div>\n                        )}\n\n\n                        <div className=\"button-form Button Button--secondary prev-div\" onClick={this.prevClickHandler}>Prev</div>\n                        <button className=\"button-form Button Button--primary\"  onClick={this.nextClickHandler}>Next</button>\n\n            </div>\n\n        )\n        pageMap.set(2, page2);\n\n            \n        let page3 = (\n            <div>\n                <div className=\"Form__Group\">\n                     <div className=\"Form__Item\" >\n                        <input className={!this.state.errors.firstName ? \"Form__Input\" : \"Form__Input form-field-error\"}  \n                                onChange={(e) => this.onFieldChange(e)} \n                                onBlur={(e) => this.validateInput(e)}\n                               value={this.state.firstName}\n                               type=\"text\" \n                               name=\"firstName\" \n                               id=\"quoteFirstName\"\n                               placeholder=\"first name\" />\n                        <span className=\"error-span\">{this.state.errors.firstName ? this.state.errors.firstNameMsg: \"\"}</span>\n\n                        <label className=\"Form__FloatingLabel\" >first name</label>\n\n                            \n                    </div>\n                </div>\n\n                <div className=\"Form__Group\">\n                    <div className=\"Form__Item\" >\n\n                        <input className={!this.state.errors.email ? \"Form__Input\" : \"Form__Input form-field-error\"}\n                                onChange={(e) => this.onFieldChange(e)} \n                                onBlur={(e) => this.validateInput(e)}\n                               value={this.state.email}\n                               type=\"email\" \n                               name=\"email\" \n                               id=\"quoteEmail\"\n                               placeholder=\"email\"\n                               required/>\n                        <span className=\"error-span\">{this.state.errors.email? this.state.errors.emailMsg: \"\"}</span>\n\n                        <label className=\"Form__FloatingLabel\" for=\"quoteEmail\">email</label>\n\n                    </div>\n                </div>\n    \n                <div className=\"Form__Group\" onKeyPress={(e) => this.handleEnterSubmit(e)}>\n                     <div className=\"Form__Item\" >\n                        <input className={!this.state.errors.mobile ? \"Form__Input\" : \"Form__Input form-field-error\"}\n                               onChange={(e) => this.onFieldChange(e)}\n                               onBlur={(e) => this.validateInput(e)}\n                               value={this.state.mobile}\n                               type=\"text\" \n                               name=\"mobile\" \n                               id=\"quoteMobile\"\n                               placeholder=\"mobile number\" />\n                        <span className=\"error-span\">{this.state.errors.mobile ? this.state.errors.mobileMsg: \"\"}</span>\n\n                        <label className=\"Form__FloatingLabel\" for=\"quoteMobile\">mobile number</label>\n\n                    </div>       \n                </div>\n                    <div className=\"button-form Button Button--secondary prev-div\" onClick={(e) => this.prevClickHandler(e)}>Prev</div>\n                    <button type=\"submit\" className=\"button-form Button Button--primary\" onClick={(e) => this.submitClickHandler(e)} >Submit</button>\n\n            </div>\n        )\n        pageMap.set(3, page3);\n        \n        return(\n            <div>\n                  <div className=\"form-container\" >\n                     {pageMap.get(this.state.page)}\n\n                 </div>\n                \n            </div>\n          \n        )\n    }\n\n}\n\nexport default QuoteForm"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AAuBA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA4HA;AACA;AACA;AAEA;AACA;AAjIA;AAmIA;AACA;AACA;AArIA;AAyIA;AACA;AAEA;AACA;AACA;AA9IA;AAgJA;AACA;AAAA;AAGA;AACA;AArJA;AAuJA;AACA;AAAA;AAIA;AACA;AA7JA;AA+JA;AAGA;AACA;AAnKA;AAoKA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AAGA;AAVA;AAAA;AAAA;AACA;AADA;AAWA;AAAA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAKA;AACA;AA3LA;AA6LA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AAzMA;AA4MA;AAEA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AACA;AADA;AAWA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAqBA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAGA;AACA;AA3OA;AA+OA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAxPA;AA2PA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAjQA;AAqQA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AArRA;AAsRA;AACA;AACA;AACA;AAEA;AACA;AACA;AA7RA;AA+RA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAGA;AACA;AArTA;AAuTA;AACA;AACA;AACA;AACA;AA3TA;AA6TA;AACA;AACA;AACA;AACA;AACA;AACA;AAnUA;AAuUA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAhVA;AAkVA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AAIA;AACA;AADA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAhYA;AAmYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AA5aA;AA6aA;AACA;AAAA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAhcA;AAicA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAndA;AA0dA;AADA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAhfA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1CA;AAhDA;AA8FA;AAlGA;AAqGA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;;AA6XA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AAQA;AAAA;AAAA;AAOA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AAAA;AAGA;AAAA;AAAA;AAQA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAPA;AASA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAQA;AAAA;AAYA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAEA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAPA;AAQA;AAAA;AAEA;AAAA;AAAA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AAFA;AAGA;AAAA;AAAA;AAHA;AAIA;AAJA;AAKA;AAAA;AAAA;AALA;AAMA;AANA;AAOA;AACA;AACA;AACA;AAAA;AAVA;AAgn5BA;AACA;AAs5BA;;;;A","sourceRoot":""}